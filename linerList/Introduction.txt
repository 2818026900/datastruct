简介
===============================================================

***************************************************************
线性表
***************************************************************
定义
具有相同数据类型的n（n>=0）个数据元素的有限序列

1.各个数据元素所占空间大小相同
2.有次序
3.有限个
4.位序从1开始，数组下标从0开始

基本操作
initList(&L) 初始化，构造空表
destroyList(&L) 销毁，释放内存

listInsert(&L,i,e) 在i位置插入元素e
listDelete(&L,i,e) 删除i上元素e,并返回元素e的值

locateElem(L,e) 按值查找
getElem(L,i) 按位查找

length(L) 求表长
printList(L) 输出表中所有值
empty(L) 判空，空返回0

注解：
c++中 "&"引用类型——对参数在函数中修改结果带回来,c中使用指针
例：
    void test(int x){
        x= 1024;
        printf("test内部 x= %d\n",x);
        fflush(stdout);
    }

    int main(){
        int x= 1;
        printf("调用test前 %d\n",x);
        fflush(stdout);
        test(x);
        printf("调用test后 %d\n",x);
        fflush(stdout);
        return 0;
    }

    运行结果：
        调用test前 1
        test内部 1024
        调用test后 1
    main函数中当使用test(&x)后,“调用test后 1”变为“调用test后 1024”

typedef 关键字 —— 数据类型重命名
用法：
    typedef <数据类型> 别名
例：
    typedef struct a{} a1;
    将自定义结构体类型a重命名为a1;
***************************************************************

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
顺序表(SequenceList)
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

存储方式
    元素逻辑空间相邻，储存空间也相邻

优缺点
    优点：查找快，可以在O(1)时间内找到第i个元素，适合密集存储
    缺点：拓展容量不方便，时间复杂的较高；插入需要移动元素多，浪费空间



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
线性链表(SingleLinkList)
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

存储方式
    每个节点由一个数据节点及一个指针节点构成，离散存放

优缺点
    优点：不要求大片连续空间，改变容量方便
    缺点：不可随机存取，要耗费一定空间存放指针

